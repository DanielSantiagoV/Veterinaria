// El Gran Libro de los Due√±os: Aqu√≠ guardamos a todos los protectores de nuestras mascotas.
const losAmosDeLasMascotas = [];

// El Censo de las Peque√±as Criaturas: Nuestro registro vital de todos los animalitos.
const lasPeque√±asCriaturas = [];

// --- Herramientas Esenciales (Utilidades B√°sicas) ---

/**
 * Forja un identificador √∫nico, como si fuera una huella digital para cada entrada.
 * Usamos la fecha y un n√∫mero aleatorio para que sea casi imposible que se repita.
 * @returns {string} Un identificador √∫nico e irrepetible.
 */
function forjarIdentificadorUnico() {
    return 'huella_' + Date.now() + '_' + Math.random().toString(36).substring(2, 11);
}

/**
 * Confirma que un campo de texto no est√© vac√≠o. Si lo est√°, avisa al usuario.
 * @param {string} elDato - El valor que estamos revisando.
 * @param {string} elNombreDelCampo - El nombre del campo para mensajes amigables.
 * @returns {boolean} `true` si el dato es v√°lido (no vac√≠o), `false` en caso contrario.
 */
function esUnCampoValido(elDato, elNombreDelCampo) {
    if (typeof elDato !== 'string' || elDato.trim() === '') {
        alert(`¬°Alerta! El campo "${elNombreDelCampo}" es como un platillo vac√≠o. Necesita algo. ¬°Por favor, rell√©nelo!`);
        return false;
    }
    return true;
}

/**
 * Revisa que un valor sea un n√∫mero positivo y real. Si no lo es, avisa.
 * @param {any} elNumero - El valor a examinar.
 * @param {string} elNombreDelCampo - El nombre del campo para los avisos.
 * @returns {boolean} `true` si es un n√∫mero positivo v√°lido, `false` de lo contrario.
 */
function esUnNumeroPositivoValido(elNumero, elNombreDelCampo) {
    const numeroPuro = Number(elNumero);
    if (isNaN(numeroPuro) || numeroPuro <= 0) {
        alert(`¬°Ups! El campo "${elNombreDelCampo}" debe ser un n√∫mero mayor a cero. Como la vida misma, ¬°siempre hacia adelante!`);
        return false;
    }
    return true;
}

/**
 * Verifica que el estado de salud sea uno de los permitidos ('Sano', 'Enfermo', 'En tratamiento').
 * @param {string} elEstado - El estado de salud a validar.
 * @returns {boolean} `true` si el estado es aceptable, `false` en caso contrario.
 */
function esUnEstadoDeSaludValido(elEstado) {
    const condicionesAceptables = ['Sano', 'Enfermo', 'En tratamiento'];
    if (!condicionesAceptables.includes(elEstado)) {
        alert(`¬°Error en el diagn√≥stico! El estado de salud debe ser "Sano", "Enfermo" o "En tratamiento". ¬°No hay m√°s opciones!`);
        return false;
    }
    return true;
}

/**
 * Busca a un due√±o por su n√∫mero de c√©dula en nuestra lista.
 * @param {string} elIdentificadorDelDue√±o - La c√©dula a buscar.
 * @returns {object | undefined} El objeto due√±o si se encuentra, o `undefined` si no.
 */
function encontrarDue√±oPorCedula(elIdentificadorDelDue√±o) {
    for (let i = 0; i < losAmosDeLasMascotas.length; i++) {
        if (losAmosDeLasMascotas[i].numeroDeCedula === elIdentificadorDelDue√±o) {
            return losAmosDeLasMascotas[i];
        }
    }
    return undefined; // No se encontr√≥.
}

/**
 * Busca a una mascota por su nombre en nuestra lista.
 * @param {string} elNombreAInvestigar - El nombre del animalito.
 * @returns {object | undefined} El objeto mascota si se encuentra, o `undefined` si no.
 */
function encontrarMascotaPorNombre(elNombreAInvestigar) {
    for (let i = 0; i < lasPeque√±asCriaturas.length; i++) {
        if (lasPeque√±asCriaturas[i].nombreDeLaMascota === elNombreAInvestigar) {
            return lasPeque√±asCriaturas[i];
        }
    }
    return undefined; // No se encontr√≥.
}

// --- Acciones de Nuestra Veterinaria (Funciones con Callbacks y setTimeout) ---

/**
 * Da de alta a un nuevo due√±o, simulando un proceso de registro con su tiempo.
 * Usa setTimeout para el retraso y un callback para decirnos el resultado.
 * @param {function} elCallbackDeResultado - La funci√≥n que se ejecutar√° al finalizar.
 */
function darDeAltaAUnDue√±o(elCallbackDeResultado) {
    console.log('‚è≥ Iniciando el ritual de bienvenida para un nuevo protector de mascotas...');
    setTimeout(function() { // Esto se ejecutar√° despu√©s del tiempo.
        const nombreDelDue√±o = prompt('¬øCu√°l es el nombre completo de este noble protector?');
        const cedulaDelDue√±o = prompt('Y su n√∫mero de c√©dula, por favor (su identificaci√≥n √∫nica):');
        const telefonoParaContactar = prompt('Un n√∫mero de tel√©fono donde podamos contactarle si nuestros amiguitos lo necesitan:');
        const correoParaMensajes = prompt('Finalmente, su correo electr√≥nico, para que no se pierdan las novedades:');

        // Primero, validamos que no haya campos vac√≠os.
        if (
            !esUnCampoValido(nombreDelDue√±o, 'Nombre del Due√±o') ||
            !esUnCampoValido(cedulaDelDue√±o, 'C√©dula') ||
            !esUnCampoValido(telefonoParaContactar, 'Tel√©fono') ||
            !esUnCampoValido(correoParaMensajes, 'Correo Electr√≥nico')
        ) {
            elCallbackDeResultado(new Error('¬°Atenci√≥n! Faltan datos esenciales o est√°n incorrectos. Es como intentar volar sin alas.'), null);
            return; // Salimos de la funci√≥n si hay un error.
        }

        // Luego, revisamos que no haya un due√±o con la misma c√©dula.
        if (encontrarDue√±oPorCedula(cedulaDelDue√±o)) {
            elCallbackDeResultado(new Error(`¬°Alarma! Ya tenemos un due√±o registrado con la c√©dula "${cedulaDelDue√±o}". ¬°No podemos duplicar identidades!`), null);
            return; // Salimos de la funci√≥n.
        }

        // Si todo est√° bien, creamos el nuevo due√±o.
        const esteNuevoDue√±o = {
            identificadorUnico: forjarIdentificadorUnico(),
            nombreCompleto: nombreDelDue√±o,
            numeroDeCedula: cedulaDelDue√±o,
            telefonoDeContacto: telefonoParaContactar,
            correoElectronico: correoParaMensajes
        };

        losAmosDeLasMascotas.push(esteNuevoDue√±o); // Lo a√±adimos a nuestra lista.
        console.log('üéâ ¬°El protector de mascotas ha sido registrado con √©xito! (La simulaci√≥n de validaci√≥n ha concluido).');
        elCallbackDeResultado(null, esteNuevoDue√±o); // No hay error (null), y enviamos el nuevo due√±o.
    }, 1500); // Se toma 1.5 segundos para "validar" la informaci√≥n.
}

/**
 * A√±ade un nuevo animalito a nuestro censo, pero primero verificamos que su due√±o exista.
 * Usa setTimeout para el retraso y un callback para decirnos el resultado.
 * @param {function} elCallbackDeResultado - La funci√≥n a invocar al finalizar.
 */
function a√±adirUnNuevoAnimalito(elCallbackDeResultado) {
    console.log('‚è≥ Iniciando el registro de un nuevo ser peludo, emplumado o escamoso...');
    setTimeout(function() { // Esto se ejecutar√° despu√©s del tiempo.
        const nombreDelAmiguito = prompt('¬øC√≥mo se llama este nuevo y adorable ser?');
        const tipoDeCriatura = prompt('¬øQu√© tipo de criatura es? (Perro, Gato, Ave, Reptil, Otro)');
        const a√±osDeVida = prompt('¬øCu√°ntos a√±os de aventura lleva?');
        const pesoEnKilos = prompt('¬øCu√°l es su peso en kilogramos? (¬°No te olvides de su figura!)');
        const estadoDeSalud = prompt('¬øCu√°l es su estado de salud actual? (Sano, Enfermo, En tratamiento)');
        const cedulaDelDue√±oAsociado = prompt('Por favor, la c√©dula del due√±o de este animalito. ¬°Necesitamos saber qui√©n le cuida!');

        // Inspecci√≥n inicial de los datos de la mascota.
        if (
            !esUnCampoValido(nombreDelAmiguito, 'Nombre del Animalito') ||
            !esUnCampoValido(tipoDeCriatura, 'Especie') ||
            !esUnCampoValido(estadoDeSalud, 'Estado de Salud') ||
            !esUnCampoValido(cedulaDelDue√±oAsociado, 'C√©dula del Due√±o') ||
            !esUnNumeroPositivoValido(a√±osDeVida, 'Edad') ||
            !esUnNumeroPositivoValido(pesoEnKilos, 'Peso') ||
            !esUnEstadoDeSaludValido(estadoDeSalud)
        ) {
            elCallbackDeResultado(new Error('¬°Datos del animalito incompletos o incorrectos! Es como un rompecabezas con piezas faltantes.'), null);
            return;
        }

        // Momento crucial: verificar que el due√±o est√© en nuestros registros.
        const elDue√±oExistente = encontrarDue√±oPorCedula(cedulaDelDue√±oAsociado);
        if (!elDue√±oExistente) {
            elCallbackDeResultado(new Error(`¬°Alerta! No encontramos un due√±o con la c√©dula "${cedulaDelDue√±oAsociado}". ¬°Un animalito necesita un protector registrado!`), null);
            return;
        }

        // Revisamos si ya hay una mascota con este nombre.
        if (encontrarMascotaPorNombre(nombreDelAmiguito)) {
            elCallbackDeResultado(new Error(`¬°Ups! Ya tenemos un animalito con el nombre "${nombreDelAmiguito}". ¬°Cada criatura merece un nombre √∫nico!`), null);
            return;
        }

        // Si todo va bien, creamos la nueva mascota.
        const nuevaCriatura = {
            identificadorUnico: forjarIdentificadorUnico(),
            nombreDeLaMascota: nombreDelAmiguito,
            tipoDeEspecie: tipoDeCriatura,
            a√±osDeVida: Number(a√±osDeVida),
            pesoEnKilos: Number(pesoEnKilos),
            estadoDeSaludActual: estadoDeSalud,
            identificadorDelDue√±o: elDue√±oExistente.identificadorUnico // Asociamos al due√±o encontrado
        };

        lasPeque√±asCriaturas.push(nuevaCriatura); // La a√±adimos a nuestra lista.
        console.log('üêæ ¬°El nuevo animalito ha sido registrado con √©xito! (La verificaci√≥n del due√±o ha finalizado).');
        elCallbackDeResultado(null, nuevaCriatura); // No hay error (null), y enviamos la nueva mascota.
    }, 2000); // Se toma 2 segundos para "validar" la existencia del due√±o.
}

/**
 * Muestra el listado completo de todos los animalitos en nuestra cl√≠nica.
 * Esta es una funci√≥n sincr√≥nica, no necesita esperar.
 */
function verTodosLosAnimalitos() {
    console.log('\n--- El Gran Listado de Todas las Peque√±as Criaturas ---');
    if (lasPeque√±asCriaturas.length === 0) {
        console.log('¬°Vaya! Nuestro censo de animalitos est√° un poco vac√≠o. ¬°An√≠mate a registrar a un nuevo amigo!');
        return;
    }
    // Recorremos la lista de mascotas y mostramos sus detalles.
    for (let i = 0; i < lasPeque√±asCriaturas.length; i++) {
        const mascota = lasPeque√±asCriaturas[i];
        let nombreDelProtector = 'Due√±o Desconocido'; // Por si no encontramos al due√±o.

        // Buscamos al due√±o por su ID.
        for (let j = 0; j < losAmosDeLasMascotas.length; j++) {
            if (losAmosDeLasMascotas[j].identificadorUnico === mascota.identificadorDelDue√±o) {
                nombreDelProtector = losAmosDeLasMascotas[j].nombreCompleto;
                break; // Ya lo encontramos, no necesitamos seguir buscando.
            }
        }

        console.log(`
            ID Universal: ${mascota.identificadorUnico}
            Nombre: ${mascota.nombreDeLaMascota}
            Especie: ${mascota.tipoDeEspecie}
            Edad: ${mascota.a√±osDeVida} a√±itos
            Peso: ${mascota.pesoEnKilos} kg
            Estado de Salud: ${mascota.estadoDeSaludActual}
            Protector: ${nombreDelProtector} (ID del Protector: ${mascota.identificadorDelDue√±o})
            ------------------------------------------------
        `);
    }
    console.log('--- Fin del Gran Listado ---');
}

/**
 * Busca a un animalito por su nombre. Esta funci√≥n tambi√©n tomar√° un tiempo.
 * Usa setTimeout para el retraso y un callback para decirnos si lo encontr√≥ o no.
 * @param {function} elCallbackDeResultado - La funci√≥n a invocar al finalizar.
 */
function buscarAnimalitoPorSuNombre(elCallbackDeResultado) {
    console.log('‚è≥ Un detective en busca de un nombre... Buscando al animalito...');
    setTimeout(function() { // Esto se ejecutar√° despu√©s del tiempo.
        const elNombreBuscado = prompt('¬øQu√© nombre tiene el animalito que buscas en nuestros registros?');
        if (!esUnCampoValido(elNombreBuscado, 'Nombre del Animalito para Buscar')) {
            elCallbackDeResultado(new Error('¬°Para buscar, necesitas dar un nombre! No podemos adivinar.'), null);
            return;
        }

        const mascotaEncontrada = encontrarMascotaPorNombre(elNombreBuscado);
        if (mascotaEncontrada) {
            let nombreDelProtector = 'Due√±o Desconocido';
            for (let i = 0; i < losAmosDeLasMascotas.length; i++) {
                if (losAmosDeLasMascotas[i].identificadorUnico === mascotaEncontrada.identificadorDelDue√±o) {
                    nombreDelProtector = losAmosDeLasMascotas[i].nombreCompleto;
                    break;
                }
            }
            console.log(`\n--- ¬°Encontramos a "${mascotaEncontrada.nombreDeLaMascota}"! ---
                ID Universal: ${mascotaEncontrada.identificadorUnico}
                Nombre: ${mascotaEncontrada.nombreDeLaMascota}
                Especie: ${mascotaEncontrada.tipoDeEspecie}
                Edad: ${mascotaEncontrada.a√±osDeVida} a√±itos
                Peso: ${mascotaEncontrada.pesoEnKilos} kg
                Estado de Salud: ${mascotaEncontrada.estadoDeSaludActual}
                Protector: ${nombreDelProtector} (ID del Protector: ${mascotaEncontrada.identificadorDelDue√±o})
                -------------------------------------------------`);
            elCallbackDeResultado(null, mascotaEncontrada); // No hay error, enviamos la mascota.
        } else {
            console.log(`üòï ¬°Qu√© pena! No hemos encontrado ninguna criatura con el nombre "${elNombreBuscado}" en nuestros anales.`);
            elCallbackDeResultado(null, null); // No es un error, simplemente no se encontr√≥.
        }
    }, 1500); // Simulamos que la b√∫squeda se toma 1.5 segundos.
}

/**
 * Actualiza el estado de salud de una mascota. Tomar√° un tiempo, como si el veterinario meditara.
 * Usa setTimeout y un callback para el resultado.
 * @param {function} elCallbackDeResultado - La funci√≥n a invocar al finalizar.
 */
function actualizarElCuidadoDeUnAnimalito(elCallbackDeResultado) {
    console.log('‚è≥ El veterinario est√° consultando sus libros... Preparando la actualizaci√≥n de salud...');
    setTimeout(function() { // Esto se ejecutar√° despu√©s del tiempo.
        console.log('El veterinario ha tomado una decisi√≥n. ¬°Continuemos!');

        const nombreDelPaciente = prompt('¬øCu√°l es el nombre del animalito cuyo estado de salud vamos a ajustar?');
        if (!esUnCampoValido(nombreDelPaciente, 'Nombre del Paciente')) {
            elCallbackDeResultado(new Error('¬°Necesitas un nombre para actualizar el estado! No podemos adivinar al paciente.'), null);
            return;
        }

        const elPaciente = encontrarMascotaPorNombre(nombreDelPaciente);
        if (!elPaciente) {
            alert(`¬°Cielos! No encontramos a ninguna criatura con el nombre "${nombreDelPaciente}". ¬øEst√°s seguro de que existe?`);
            elCallbackDeResultado(null, null); // No es un error, solo que no se encontr√≥.
            return;
        }

        const elNuevoEstado = prompt(`El estado actual de "${elPaciente.nombreDeLaMascota}" es "${elPaciente.estadoDeSaludActual}". ¬øCu√°l es su nuevo estado? (Sano, Enfermo, En tratamiento)`);

        if (!esUnCampoValido(elNuevoEstado, 'Nuevo Estado de Salud') || !esUnEstadoDeSaludValido(elNuevoEstado)) {
            alert('¬°El nuevo estado de salud no es v√°lido! Por favor, revisa las opciones permitidas.');
            elCallbackDeResultado(new Error('Estado de salud inv√°lido.'), null);
            return;
        }

        elPaciente.estadoDeSaludActual = elNuevoEstado; // ¬°Actualizaci√≥n exitosa!
        console.log(`‚úÖ ¬°Magn√≠fico! El estado de salud de "${elPaciente.nombreDeLaMascota}" ha sido actualizado a "${elNuevoEstado}". ¬°Esperamos su pronta recuperaci√≥n!`);
        elCallbackDeResultado(null, elPaciente); // No hay error, enviamos la mascota actualizada.
    }, 1000); // Simula la "meditaci√≥n" del veterinario por 1 segundo.
}

/**
 * Elimina una mascota de nuestros registros, pero con una pausa para la confirmaci√≥n.
 * Usa setTimeout y un callback para el resultado.
 * @param {function} elCallbackDeResultado - La funci√≥n a invocar al finalizar.
 */
function decirAdiosAUnAnimalito(elCallbackDeResultado) {
    console.log('‚è≥ Preparando el emotivo momento de decir adi√≥s a un registro...');
    setTimeout(function() { // Esto se ejecutar√° despu√©s del tiempo.
        const nombreDelDespedida = prompt('¬øCu√°l es el nombre del animalito que se despide de nuestros registros?');
        if (!esUnCampoValido(nombreDelDespedida, 'Nombre del Animalito para Eliminar')) {
            elCallbackDeResultado(new Error('¬°Para despedir a un animalito, necesitamos su nombre!'), null);
            return;
        }

        let indiceParaEliminar = -1; // Buscamos la posici√≥n de la mascota.
        for (let i = 0; i < lasPeque√±asCriaturas.length; i++) {
            if (lasPeque√±asCriaturas[i].nombreDeLaMascota === nombreDelDespedida) {
                indiceParaEliminar = i;
                break;
            }
        }

        if (indiceParaEliminar === -1) {
            alert(`¬°Mascota no encontrada! Parece que "${nombreDelDespedida}" ya se ha ido o nunca estuvo aqu√≠.`);
            elCallbackDeResultado(null, false); // No es un error, solo que no se encontr√≥.
            return;
        }

        // Una pausa para la confirmaci√≥n, ¬°las decisiones importantes se piensan!
        const seConfirmaLaAccion = confirm(`¬øEst√°s completamente seguro de borrar a "${nombreDelDespedida}" de nuestros registros? Esta acci√≥n es como borrar un recuerdo, ¬°no tiene vuelta atr√°s!`);
        if (seConfirmaLaAccion) {
            lasPeque√±asCriaturas.splice(indiceParaEliminar, 1); // Lo eliminamos.
            console.log(`üóëÔ∏è ¬°Adi√≥s! "${nombreDelDespedida}" ha sido retirado de nuestros anales. ¬°Que descanse en la memoria digital!`);
            elCallbackDeResultado(null, true); // No hay error, y confirmamos la eliminaci√≥n.
        } else {
            console.log(`"Phew", "${nombreDelDespedida}" se queda con nosotros. ¬°La decisi√≥n ha sido revocada!`);
            elCallbackDeResultado(null, false); // No hay error, y confirmamos que no se elimin√≥.
        }
    }, 2000); // Damos 2 segundos para que el usuario reflexione antes de confirmar.
}

/**
 * Muestra todos los animalitos que pertenecen a un due√±o espec√≠fico, como si abri√©ramos su √°lbum familiar.
 * Usa setTimeout y un callback para el resultado.
 * @param {function} elCallbackDeResultado - La funci√≥n a invocar al finalizar.
 */
function verLosAnimalitosDeUnDue√±o(elCallbackDeResultado) {
    console.log('‚è≥ Abriendo el √°lbum familiar de mascotas de un protector... Esto puede tardar un momento...');
    setTimeout(function() { // Esto se ejecutar√° despu√©s del tiempo.
        console.log('¬°√Ålbum cargado! Listos para mostrar las fotos.');

        const cedulaDelDue√±oParaBuscar = prompt('Para abrir el √°lbum, ¬øcu√°l es la c√©dula del protector?');
        if (!esUnCampoValido(cedulaDelDue√±oParaBuscar, 'C√©dula del Due√±o')) {
            elCallbackDeResultado(new Error('¬°Necesitas una c√©dula para ver el √°lbum!'), null);
            return;
        }

        const elProtectorObjetivo = encontrarDue√±oPorCedula(cedulaDelDue√±oParaBuscar);
        if (!elProtectorObjetivo) {
            alert(`¬°Oh no! No encontramos a ning√∫n protector con la c√©dula "${cedulaDelDue√±oParaBuscar}". ¬øEst√°s seguro de que lo tenemos registrado?`);
            elCallbackDeResultado(null, null); // No es error, no se encontr√≥ el due√±o.
            return;
        }

        const lasCriaturasDelProtector = [];
        for (let i = 0; i < lasPeque√±asCriaturas.length; i++) {
            if (lasPeque√±asCriaturas[i].identificadorDelDue√±o === elProtectorObjetivo.identificadorUnico) {
                lasCriaturasDelProtector.push(lasPeque√±asCriaturas[i]);
            }
        }

        console.log(`\n--- El Elenco de Animalitos de ${elProtectorObjetivo.nombreCompleto} (C√©dula: ${elProtectorObjetivo.numeroDeCedula}) ---`);
        if (lasCriaturasDelProtector.length === 0) {
            console.log(`Parece que ${elProtectorObjetivo.nombreCompleto} es un protector muy nuevo, ¬°a√∫n no tiene animalitos registrados con nosotros!`);
            elCallbackDeResultado(null, []); // No hay error, pero la lista est√° vac√≠a.
            return;
        }

        for (let i = 0; i < lasCriaturasDelProtector.length; i++) {
            const mascota = lasCriaturasDelProtector[i];
            console.log(`
                ID Universal: ${mascota.identificadorUnico}
                Nombre: ${mascota.nombreDeLaMascota}
                Especie: ${mascota.tipoDeEspecie}
                Edad: ${mascota.a√±osDeVida} a√±itos
                Peso: ${mascota.pesoEnKilos} kg
                Estado de Salud: ${mascota.estadoDeSaludActual}
                ------------------------------------------------
            `);
        }
        console.log('--- Fin del √Ålbum del Protector ---');
        elCallbackDeResultado(null, lasCriaturasDelProtector); // No hay error, enviamos la lista de mascotas.
    }, 2000); // Simula la carga de informaci√≥n por 2 segundos.
}

// --- El Gran Director de Orquesta: Men√∫ Principal y sus Decisiones ---

/**
 * Inicia la gran gesti√≥n de nuestra veterinaria, el coraz√≥n del sistema.
 * Es un bucle que se repite hasta que el usuario decida salir.
 */
function iniciarGestionVeterinaria() {
    let elShowDebeContinuar = true; // Nuestra bandera para seguir o parar el programa.

    // Usamos una funci√≥n interna para mostrar el men√∫ y pedir la opci√≥n,
    // as√≠ podemos llamarla de nuevo despu√©s de cada operaci√≥n as√≠ncrona.
    function mostrarMenuYPedirOpcion() {
        if (!elShowDebeContinuar) {
            return; // Si ya decidimos salir, no mostramos el men√∫.
        }

        const laOpcionSeleccionada = prompt(`
            üè• BIENVENIDOS A 'EL RINC√ìN DEL AMIGUITO' üêæ
            
            ¬°Tu destino para el cuidado de mascotas!
            
            Por favor, elige tu pr√≥xima acci√≥n ingresando el n√∫mero correspondiente:
            
            1. üè° Dar De Alta A Un Protector (Due√±o)
            2. üêæ A√±adir Un Nuevo Peque√±o Amiguito (Mascota)
            3. üìñ Ver El Gran Censo de Todos Los Amiguitos
            4. üîç Buscar Un Amiguito Por Su Nombre
            5. ‚ù§Ô∏è‚Äçü©π Actualizar El Cuidado De Un Amiguito
            6. üëã Decir Adi√≥s A Un Amiguito (Eliminar)
            7. üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Ver Los Amiguitos de Un Protector
            8. üö™ Cerrar Las Puertas del Programa
            
            ------------------------------------------
            ‚ú® Resumen Actual:
            Amiguitos Registrados: ${lasPeque√±asCriaturas.length} | Protectores Registrados: ${losAmosDeLasMascotas.length}
        `);

        switch (laOpcionSeleccionada) {
            case '1': // Dar de alta a un due√±o (as√≠ncrono con callback)
                darDeAltaAUnDue√±o(function(unError, elDue√±oRecienCreado) {
                    if (unError) {
                        alert(`¬°Problema al registrar al protector!: ${unError.message}`);
                        console.error(`ERROR (Dar de Alta Due√±o):`, unError);
                    } else {
                        alert(`¬°Bienvenido! El protector "${elDue√±oRecienCreado.nombreCompleto}" ha sido a√±adido a la familia.`);
                        console.log('‚ú® Nuevo Protector Registrado:', elDue√±oRecienCreado);
                    }
                    // Despu√©s de la operaci√≥n as√≠ncrona, volvemos a mostrar el men√∫.
                    mostrarMenuYPedirOpcion();
                });
                break;

            case '2': // A√±adir una nueva mascota (as√≠ncrono con callback)
                a√±adirUnNuevoAnimalito(function(unError, laNuevaMascota) {
                    if (unError) {
                        alert(`¬°Problema al a√±adir al amiguito!: ${unError.message}`);
                        console.error(`ERROR (A√±adir Animalito):`, unError);
                    } else {
                        alert(`¬°Hurra! El amiguito "${laNuevaMascota.nombreDeLaMascota}" ya es parte de nuestra cl√≠nica.`);
                        console.log('üêæ Nueva Criatura A√±adida:', laNuevaMascota);
                    }
                    // Despu√©s de la operaci√≥n as√≠ncrona, volvemos a mostrar el men√∫.
                    mostrarMenuYPedirOpcion();
                });
                break;

            case '3': // Listar todas las mascotas (sincr√≥nico)
                verTodosLosAnimalitos();
                // Como es sincr√≥nico, podemos mostrar el men√∫ de inmediato.
                mostrarMenuYPedirOpcion();
                break;

            case '4': // Buscar mascota por nombre (as√≠ncrono con callback)
                buscarAnimalitoPorSuNombre(function(unError, mascotaHallada) {
                    if (unError) {
                        alert(`¬°Problema al buscar al amiguito!: ${unError.message}`);
                        console.error(`ERROR (Buscar Animalito):`, unError);
                    } else if (mascotaHallada) {
                        // El mensaje de √©xito ya se muestra dentro de la funci√≥n buscarAnimalitoPorSuNombre
                    } else {
                        // El mensaje de no encontrado ya se muestra dentro de la funci√≥n buscarAnimalitoPorSuNombre
                    }
                    mostrarMenuYPedirOpcion();
                });
                break;

            case '5': // Actualizar estado de salud de mascota (as√≠ncrono con callback)
                actualizarElCuidadoDeUnAnimalito(function(unError, mascotaActualizada) {
                    if (unError) {
                        alert(`¬°Problema al actualizar al amiguito!: ${unError.message}`);
                        console.error(`ERROR (Actualizar Animalito):`, unError);
                    } else if (mascotaActualizada) {
                         // El mensaje de √©xito ya se muestra dentro de la funci√≥n actualizarElCuidadoDeUnAnimalito
                    } else {
                         // El mensaje de no encontrado ya se muestra dentro de la funci√≥n actualizarElCuidadoDeUnAnimalito
                    }
                    mostrarMenuYPedirOpcion();
                });
                break;

            case '6': // Eliminar mascota por nombre (as√≠ncrono con callback y confirmaci√≥n)
                decirAdiosAUnAnimalito(function(unError, seElimino) {
                    if (unError) {
                        alert(`¬°Problema al despedir al amiguito!: ${unError.message}`);
                        console.error(`ERROR (Eliminar Animalito):`, unError);
                    } else if (seElimino === true) {
                        // El mensaje de √©xito ya se muestra dentro de la funci√≥n decirAdiosAUnAnimalito
                    } else {
                        // El mensaje de no encontrado o cancelado ya se muestra dentro de la funci√≥n decirAdiosAUnAnimalito
                    }
                    mostrarMenuYPedirOpcion();
                });
                break;

            case '7': // Ver mascotas de un due√±o (as√≠ncrono con callback)
                verLosAnimalitosDeUnDue√±o(function(unError, listaDeMascotas) {
                    if (unError) {
                        alert(`¬°Problema al ver los amiguitos del protector!: ${unError.message}`);
                        console.error(`ERROR (Ver Mascotas de Due√±o):`, unError);
                    } else {
                        // Los mensajes de √©xito o lista vac√≠a ya se muestran dentro de la funci√≥n verLosAnimalitosDeUnDue√±o
                    }
                    mostrarMenuYPedirOpcion();
                });
                break;

            case '8': // Salir del programa
                alert('¬°Gracias por confiar en "El Rinc√≥n del Amiguito"! ¬°Esperamos verte pronto!');
                console.log('üö™ El programa ha cerrado sus puertas. ¬°Hasta la pr√≥xima!');
                elShowDebeContinuar = false; // Detenemos el bucle al establecer esta bandera en falso.
                break;

            default: // Opci√≥n no reconocida
                alert('¬°Vaya! Esa opci√≥n no est√° en nuestro men√∫. Por favor, elige un n√∫mero del 1 al 8.');
                // Como fue un error, volvemos a mostrar el men√∫.
                mostrarMenuYPedirOpcion();
                break;
        }
    }

    // ¬°El gran lanzamiento! Iniciamos mostrando el men√∫ por primera vez.
    mostrarMenuYPedirOpcion();
}

// Llama a la funci√≥n principal cuando la p√°gina est√© completamente cargada.
window.onload = iniciarGestionVeterinaria;